package com.resqsoft.biz;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * Similar to the Martin Fowler's "Notification" pattern 
 * (http://www.martinfowler.com/eaaDev/Notification.html).
 */
public class ErrorList extends ArrayList<BusinessMessage> {

	/**
     * 
     */
    private static final long serialVersionUID = 5867708399136164383L;

    public void addError(String msgKey) {
        BusinessMessage error = new BusinessMessage(msgKey);
	    this.add(error);
    }

    /**
	 * @param msgKey
     * @param arg1
     */
    public void addError(String msgKey, String arg1) {
        BusinessMessage error = new BusinessMessage(msgKey, arg1);
        this.add(error);
    }

	public void addError(String msgKey, String arg1, String arg2) {
		String[] args = new String[2];
		args[0] = arg1;
		args[1] = arg2;
		this.addError(msgKey, args);
	}
	
	public void addError(String msgKey, String arg1, String arg2, String arg3) {
		String[] args = new String[3];
		args[0] = arg1;
		args[1] = arg2;
		args[2] = arg3;
		this.addError(msgKey, args);
	}

	public void addError(String msgKey, String arg1, String arg2, String arg3, String arg4) {
		String[] args = new String[4];
		args[0] = arg1;
		args[1] = arg2;
		args[2] = arg3;
		args[3] = arg4;
		this.addError(msgKey, args);
	}
	
	public void addError(String msgKey, String[] args) {
        BusinessMessage error = new BusinessMessage(msgKey, args);
		this.add(error);
    }

	/**
	 * Add a collection of messages to the list for use when messages are
	 * generated by multiple components within a transaction.
	 * 
	 * Validation that goes across multiple business objects may reside either
	 * in a business object method, a separate validation class, or in a
	 * service-based component that uses multiple business objects. In this
	 * case, there may be business errors that can occur in multiple business
	 * objects as well as in a service component. Therefore, we need a way to
	 * merge erros coming from different sources. This method provides for this
	 * by taking a collection of messages and adding them to the list.
	 * 
	 * @param messages
	 *            List of BusinessMessage objects to be added to the list.
	 * @see J2EE Best Practices, p. 97
	 */
	public void addErrors(ArrayList<BusinessMessage> messages) {
		Iterator<BusinessMessage> iter = messages.iterator();
		while (iter.hasNext()) {
			BusinessMessage msg = iter.next();
			this.add(msg);
		}
	}

	/**
	 * Create a ValidaitonException with the list of errors already in it.
	 * 
	 * @return
	 */
	public ValidationException createValidationException() {
		// Add error list to ValidationException 
		ValidationException ve = new ValidationException("ValidationException: see error list", this);
		return ve;
    }


		/**
	 * Create a ValidationException with the list of errors already in it and
	 * with the given message.
		 */
	public static ValidationException createValidationException(String msgKey) {
		ErrorList errorList = new ErrorList();
		errorList.addError(new BusinessMessage(msgKey));
		ValidationException e = errorList.createValidationException();
        return e;
    }

	/**
	 * Add a Business Message
	 * 
	 * @param message
	 */
	public void addError(BusinessMessage message) {
		this.add(message);
    }	
	
}
